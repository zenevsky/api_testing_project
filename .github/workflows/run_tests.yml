name: Python Autotests

on:
  workflow_dispatch:
    inputs:
      deployment_target:
        description: Choose tests set
        required: true
        type: choice
        default: smoke
        options:
          - smoke
          - all

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  download-history:
    runs-on: ubuntu-latest
    name: Download history
    steps:
      - name: setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      
      - name: Check for existing artifacts
        id: check-artifacts
        run: |
          # Check for allure-results artifact
          ARTIFACT_JSON=$(curl -s -L \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/zenevsky/api_testing_project/actions/artifacts?name=allure-results")
          
          ARTIFACT_ID=$(echo "$ARTIFACT_JSON" | python -c "import sys, json; artifacts = json.load(sys.stdin)['artifacts']; print(artifacts[0]['id'] if artifacts else 'none');")
          
          if [ "$ARTIFACT_ID" != "none" ]; then
            echo "Found allure-results artifact: $ARTIFACT_ID"
            curl -L \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/zenevsky/api_testing_project/actions/artifacts/$ARTIFACT_ID/zip" \
              -o artifacts.zip
            echo "allure_exists=true" >> $GITHUB_OUTPUT
          else
            echo "No allure-results artifact found."
            echo "allure_exists=false" >> $GITHUB_OUTPUT
          fi

          # Check for github-pages artifact
          PAGES_JSON=$(curl -s -L \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/zenevsky/api_testing_project/actions/artifacts?name=github-pages")
          
          REPORT_ID=$(echo "$PAGES_JSON" | python -c "import sys, json; artifacts = json.load(sys.stdin)['artifacts']; print(artifacts[0]['id'] if artifacts else 'none');")
          
          if [ "$REPORT_ID" != "none" ]; then
            echo "Found github-pages artifact: $REPORT_ID"
            curl -L \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/zenevsky/api_testing_project/actions/artifacts/$REPORT_ID/zip" \
              -o pages.zip
            echo "pages_exists=true" >> $GITHUB_OUTPUT
          else
            echo "No github-pages artifact found."
            echo "pages_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Extract artifacts if they exist
        if: steps.check-artifacts.outputs.allure_exists == 'true' || steps.check-artifacts.outputs.pages_exists == 'true'
        run: |
          mkdir -p allure-results old_pages pages_history
          if [ -f artifacts.zip ]; then
            unzip artifacts.zip -d allure-results
          fi
          if [ -f pages.zip ]; then
            unzip pages.zip -d old_pages
            tar -xvf old_pages/artifact.tar -C pages_history
            cp -r pages_history/history/* allure-results/ || echo "No history found"
          fi

      - name: Store allure history (if any)
        if: steps.check-artifacts.outputs.allure_exists == 'true' || steps.check-artifacts.outputs.pages_exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: allure-results
          retention-days: 1

  run-tests:
    runs-on: ubuntu-latest
    name: Run autotests
    needs: download-history
    steps:
      - name: Checkout autotests
        uses: actions/checkout@v4
      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: run all tests
        if: "github.event.inputs.deployment_target == 'all'"
        run: pytest --alluredir=allure-results
        continue-on-error: true
      - name: run all tests
        if: "github.event.inputs.deployment_target == 'smoke'"
        run: pytest -m critical --alluredir=allure-results
        continue-on-error: true
      - name: Install Java
        uses: actions/setup-java@v4
        with:
          distribution: 'microsoft'
          java-version: '21'
      - name: Install Allure
        run: sudo wget https://github.com/allure-framework/allure2/releases/download/2.34.0/allure-2.34.0.tgz && sudo tar -zxvf allure-2.34.0.tgz -C /opt/ && sudo ln -s /opt/allure-2.34.0/bin/allure /usr/bin/allure
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v4
      - name: Generate report
        run: allure generate -c allure-results -o _site
      - name: Save allure report
        uses: actions/upload-artifact@v4
        with:
          name: _site
          path: _site
          retention-days: 1

  publish-report:
    name: Report publication
    runs-on: ubuntu-latest
    needs: run-tests
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
